name: Release

on:
  push:
    branches:
      - main
    paths:
      - .VERSION

permissions:
  contents: write
  security-events: write

jobs:
  release:
    name: Validate and Publish
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Build
        run: go build ./...

      - name: Test
        run: go test ./...

      - name: Lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

      - name: Install gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest

      - name: Run gosec
        run: gosec -fmt sarif -out gosec.sarif ./...

      - name: Upload gosec SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec.sarif

      - name: Determine version
        id: version
        run: |
          version=$(cat .VERSION)
          echo "current=${version}" >> "$GITHUB_OUTPUT"
          echo "tag=v${version}" >> "$GITHUB_OUTPUT"

      - name: Package library
        env:
          VERSION: ${{ steps.version.outputs.current }}
        run: |
          mkdir -p dist
          files="version go.mod .VERSION"
          if [ -f go.sum ]; then
            files="${files} go.sum"
          fi
          tar -czf "dist/version-lib-${VERSION}.tar.gz" ${files}

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: ${{ steps.version.outputs.tag }}
          body: |
            Automated release for version ${{ steps.version.outputs.current }}.
          files: dist/version-lib-${{ steps.version.outputs.current }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
